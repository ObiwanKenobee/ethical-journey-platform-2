name: Automatic Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, development]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-merge checks to prevent conflicts
  pre-merge-checks:
    name: Pre-merge Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run typecheck

      - name: ESLint check
        run: npm run lint

      - name: Build check
        run: npm run build

      - name: Check for merge conflicts
        run: |
          if git merge-tree $(git merge-base HEAD main) HEAD main | grep -q "<<<<<<< "; then
            echo "‚ùå Merge conflicts detected"
            exit 1
          else
            echo "‚úÖ No merge conflicts found"
          fi

  # Detect and label conflicts
  conflict-detection:
    name: Conflict Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Check for conflicts
        id: conflict-check
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Try to merge main into current branch
          if ! git merge --no-commit --no-ff main; then
            echo "conflicts=true" >> $GITHUB_OUTPUT
            echo "‚ùå Merge conflicts detected in PR #${{ github.event.pull_request.number }}"
            
            # Get list of conflicted files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)
            echo "conflicted_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFLICTED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Abort the merge
            git merge --abort
          else
            echo "conflicts=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No merge conflicts found"
            git reset --hard HEAD
          fi

      - name: Add conflict label
        if: steps.conflict-check.outputs.conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['status: merge-conflict']
            });

      - name: Remove conflict label
        if: steps.conflict-check.outputs.conflicts == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'status: merge-conflict'
              });
            } catch (error) {
              // Label might not exist, ignore error
              console.log('Label not found or already removed');
            }

      - name: Comment on PR with conflict info
        if: steps.conflict-check.outputs.conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictedFiles = `${{ steps.conflict-check.outputs.conflicted_files }}`;
            const files = conflictedFiles.split('\n').filter(f => f.length > 0);

            const comment = `
            ## ‚ö†Ô∏è Merge Conflicts Detected

            This pull request has merge conflicts that need to be resolved before it can be merged.

            **Conflicted files:**
            ${files.map(file => `- \`${file}\``).join('\n')}

            **To resolve conflicts:**
            1. Pull the latest changes from main: \`git pull origin main\`
            2. Merge main into your branch: \`git merge main\`
            3. Resolve conflicts in the listed files
            4. Commit the resolved changes: \`git commit -m "Resolve merge conflicts"\`
            5. Push to your branch: \`git push\`

            **Automated resolution options:**
            - If conflicts are in generated files, consider using \`git checkout --theirs\` or \`git checkout --ours\`
            - For package-lock.json conflicts, delete the file and run \`npm install\`

            The conflict detection will re-run automatically when you push updates.
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Auto-resolve simple conflicts
  auto-resolve-conflicts:
    name: Auto-resolve Simple Conflicts
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: conflict-detection
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Git
        run: |
          git config user.name "Atlas Auto-Resolver"
          git config user.email "auto-resolver@atlas.com"

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Auto-resolve package.json conflicts
        run: |
          if git merge --no-commit --no-ff main; then
            echo "‚úÖ No conflicts to resolve"
            git reset --hard HEAD
            exit 0
          fi

          # Check if only package.json or package-lock.json have conflicts
          CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)

          # Auto-resolve package-lock.json by regenerating
          if echo "$CONFLICTED_FILES" | grep -q "package-lock.json"; then
            echo "üîß Auto-resolving package-lock.json"
            git checkout --theirs package-lock.json || true
            npm install
            git add package-lock.json
          fi

          # Auto-resolve simple package.json conflicts (version bumps)
          if echo "$CONFLICTED_FILES" | grep -q "package.json"; then
            echo "üîß Attempting to auto-resolve package.json"
            # Use theirs for version conflicts, ours for dependencies
            git checkout --theirs package.json || true
            git add package.json
          fi

          # Check if all conflicts are resolved
          if ! git diff --name-only --diff-filter=U | grep -q .; then
            echo "‚úÖ All conflicts auto-resolved"
            git commit -m "Auto-resolve merge conflicts
            
            - Regenerated package-lock.json
            - Resolved package.json version conflicts
            
            [automated-conflict-resolution]"
            
            git push origin HEAD
          else
            echo "‚ùå Some conflicts still need manual resolution"
            git merge --abort
          fi

  # Auto-merge when ready
  auto-merge:
    name: Auto-merge PR
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge') &&
      !contains(github.event.pull_request.labels.*.name, 'status: merge-conflict') &&
      !contains(github.event.pull_request.labels.*.name, 'no-auto-merge')
    needs: [pre-merge-checks, conflict-detection]
    steps:
      - name: Auto-merge PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Check if all required checks have passed
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            const allChecksPassed = checks.check_runs.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );

            if (allChecksPassed && pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash',
                commit_title: `${pr.title} (#${pr.number})`,
                commit_message: `${pr.body}\n\n[auto-merged]`
              });
              
              console.log('‚úÖ PR auto-merged successfully');
            } else {
              console.log('‚ùå PR not ready for auto-merge');
            }

  # Cleanup after merge
  cleanup:
    name: Post-merge Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Delete merged feature branches
        uses: actions/github-script@v7
        with:
          script: |
            // Get recently merged PRs
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });

            for (const pr of pulls) {
              if (pr.merged_at && pr.head.ref.startsWith('feature/')) {
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${pr.head.ref}`
                  });
                  console.log(`üóëÔ∏è Deleted branch: ${pr.head.ref}`);
                } catch (error) {
                  console.log(`‚ùå Could not delete branch: ${pr.head.ref}`);
                }
              }
            }
